@using DU.Themes.Views;
@{
    ViewBag.Title = Resources.CreateYear;
}

<section class="content-header">
    <h1></h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
        <li><a href="#">Examples</a></li>
        <li class="active">Blank page</li>
    </ol>
</section>
<section class="content" id="app">
    <div class="container">
        <div class="col-md-12">
            <div class="box box-info">
                <div class="box-header with-border">
                    <h1>@Resources.CreateYear</h1>
                </div>
                <div class="box-body">

                    <form class="form-horizontal">
                        <div class="form-group">
                            <label for="inputName" class="col-sm-2 control-label">@Resources.StudyYearBeggining</label>
                            <div class="col-sm-10">
                                <datepicker name="Start" v-model="entity.Start"></datepicker>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="inputName" class="col-sm-2 control-label">@Resources.StudyYearEnding</label>
                            <div class="col-sm-10">
                                <datepicker name="End" v-model="entity.End"></datepicker>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="box-footer">
                    <div class="pull-left">
                        <a class="btn btn-default" href="@Url.Action("Persons", "Maintenance")">Cancel</a>
                    </div>
                    <div class="pull-right">
                        <button class="btn btn-success" v-on:click="submit">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </div>



</section>
<script type="text/x-template" id="datepicker">
    <input type="text" ref="input" class="form-control" v-bind:value="value" v-on:input="updateValue($event.target.value)" />
</script>

@section scripts{
    <script type="text/javascript">
        function loadRecord(callback) {
            $.ajax({
                url: "@Url.HttpRouteUrl("YearModel", new { })",
                method: "GET",
                contentType: "application/json; UTF8",
            }).done(function (data) {
                callback(null, data);
                console.log('data', data);
            }).error(function (xhr, param1, param2, param3) {
                toastr.error(param2);
                console.log(xhr, param1, param2, param3);
            }).always(function () {

            });
        }

        async.parallel([loadRecord], function (err, result) {

            var date = new Date(1992, 2, 18);
            var datepicker = {
                template: '#datepicker',
                props: ['value'],
                mounted: function () {
                    var vm = this,
                        el = $(this.$el);

                    el.datepicker({
                        language: "lv",
                        weekStart: 1,
                        maxViewMode: 0,
                        format: "dd/mm/yyyy"
                    })
                    .on('changeDate', function (changeDateEvent) {
                        vm.updateValue(changeDateEvent.date);
                    });

                    vm.updateValue(moment.utc(vm.value, moment.ISO_8601));

                    var date = moment.utc(vm.value, moment.ISO_8601).format("DD/MM/YYYY");
                    el.datepicker('update', date);

                },
                destroyed: function () {
                    $(this.$el).off().datepicker('destroy');
                },
                methods: {
                    updateValue: function (value) {

                        if (value) {
                            var time = value.toISOString()

                            var mmnt = moment.utc(time, moment.ISO_8601),
                                isoString = mmnt.toISOString(),
                                timeString = mmnt.format("DD/MM/YYYY");

                            this.$emit('input', isoString);
                            this.$refs.input.value = timeString;
                        }
                        else {
                            this.$emit('input', "");
                            this.$refs.input.value = "";
                        }
                    }
                }
            };

            Vue.component('datepicker', datepicker);

            var app = new Vue({
                el: '#app',
                data: {
                    entity: result[0]
                },
                methods: {
                    setDateTime: function (newDate) {
                        console.log('this', this, 'data.startDate', this.startDate);
                    },
                    submit: function () {
                        var self = this;

                        $.ajax({
                            url: "@Url.HttpRouteUrl("CreateYearModel", new { })",
                            method: "POST",
                            data: JSON.stringify(self.entity),
                            contentType: "application/json; charset=utf-8"
                        }).done(function (data) {
                            //self.refresh();
                        }).error(function (xhr, param1, param2, param3) {
                            try {
                                var error = JSON.parse(xhr.responseText);

                                if (error.ValidationErrors) {
                                    $.each(error.ValidationErrors, function (idx, valErr) {
                                        toastr.error(valErr.ErrorMessage);
                                    })
                                }

                                if (error.Message) {
                                    toastr.error(error.Message);
                                }

                            } catch (err) {
                                toastr.error(param2);

                            }


                            console.log(xhr, param1, param2, param3);
                        }).always(function () {

                        });
                    }
                }
            });


        });
    </script>
}